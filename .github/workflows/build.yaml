name: Build
on:
  - push
  - pull_request
jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04
    steps:
    - name: Clone
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_PRIVILEGED_TOKEN }}
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Configure Git signing
        run: |
          GIT_EMAIL=sa-admin@ms.ingenico.com
          echo "${GPG_KEY}" |  gpg --dearmor | gpg --batch --yes --import -
          GPG_KEY_ID=$(gpg --list-secret-key --keyid-format long --with-colons ${GIT_EMAIL}  | grep sec | cut -f5 -d:)
          cat << EOF > /tmp/gpg-with-passphrase
          #!/bin/sh
          gpg --passphrase \${GPG_PASSPHRASE} --batch --pinentry-mode loopback --no-tty "\$@"
          EOF
          chmod +x /tmp/gpg-with-passphrase
          ls -l /tmp/gpg-with-passphrase
          git config --global gpg.program "/tmp/gpg-with-passphrase"
          git config --global commit.gpgsign "true"
          git config --global user.signingkey "${GPG_KEY_ID}"
          git config --global user.name "IMS Bot"
          git config --global user.email "${GIT_EMAIL}"
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
    - name: Cache Maven data
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build up cache
      run: |
        echo "${MAVEN_SETTINGS}" > ~/.m2/settings.xml
        maven_temp_dir="$(mktemp -d)"
        cp pom.xml "${maven_temp_dir}"
        pushd "${maven_temp_dir}"
        mvn package || true
        sleep 10
        popd
        rm -rf "${maven_temp_dir}"
      env:
        MAVEN_SETTINGS: ${{ secrets.MAVEN_SETTINGS }}
        MAVEN_OPTS: >
          -Dmaven.wagon.http.retryHandler.count=5
    - name: Determine next version
      uses: cycjimmy/semantic-release-action@v2
      id: semantic_relase_dry_run
      with:
        dry_run: true
        extra_plugins: |
          @semantic-release/exec
          @semantic-release/git
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Update POMs
      if: steps.semantic_relase_dry_run.outputs.new_release_published == 'true'
      run: |
        mvn versions:set -DnewVersion=${{ steps.semantic_relase_dry_run.outputs.new_release_version }}
    - name: Build with Maven
      run: |
        mvn install
      env:
        MAVEN_OPTS: >
          -Dmaven.wagon.http.retryHandler.count=5
    - name: Set up Node.js
      uses: actions/setup-node@v1
    - name: Semantic release
      run: |
        npm install
        npm run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GIT_AUTHOR_NAME: "IMS Bot"
        GIT_AUTHOR_EMAIL: "sa-admin@ms.ingenico.com"
        GIT_COMMITTER_NAME: "IMS Bot"
        GIT_COMMITTER_EMAIL: "sa-admin@ms.ingenico.com"
